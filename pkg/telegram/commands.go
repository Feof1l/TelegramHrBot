package telegram

import (
	"encoding/json"
	"os"
	"regexp"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// —Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
var UserAgreement = "https://telegram.org/tos/ru"

// —Å—Ç–∞—Ä—Ç–≤–æ–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥
var startMessage = `–ü—Ä–∏–≤–µ—Ç! –Ø - HR –±–æ—Ç.–°–µ–π—á–∞—Å –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ï—Å–ª–∏ –≥–æ—Ç–æ–≤(–∞) –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π, –∂–º–∏ "–î–∞".
–ï—Å–ª–∏ –≤—ã–±–µ—Ä–µ—à—å "–î–∞", —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.–ü—Ä–æ–¥–æ–ª–∂–∏–º –¥–∏–∞–ª–æ–≥? `

var answerKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // inline –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–î–∞", "Yes"),
		tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "No"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", "Block"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonURL("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", UserAgreement),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –∏–º–µ–Ω–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
var candidateNameMessage = `–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–Ω–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è`

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
var choiseProfilMessage = ` –í—ã–±–µ—Ä–µ—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å!`

var choiseProfil = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã`

var choiseProfilKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("Go-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "Golang backend - developer"),
		tgbotapi.NewInlineKeyboardButtonData("Java-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "Java backend - developer"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "Frontend - developer"),
		tgbotapi.NewInlineKeyboardButtonData("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç DS", "Data Science - specialist"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–∑–∏—Ü–∏–∏ x
var choisePositionMessage = `–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å!`

var choisePosition = `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –æ—Ç–∫—Ä—ã—Ç –Ω–∞–±–æ—Ä –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏:`

var choisePositionKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°—Ç–∞–∂—ë—Ä", "Intern"),
		tgbotapi.NewInlineKeyboardButtonData("Junior", "Junior"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("Middle", "Middle"),
		tgbotapi.NewInlineKeyboardButtonData("Senior", "Senior"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("Team Lead", "Team Lead"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
var educationQuestion = `–ö–∞–∫–æ–µ —É —Ç–µ–±—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç?`

var educationKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°—Ä–µ–¥–Ω–µ–µ", "–°—Ä–µ–¥–Ω–µ–µ"),
		tgbotapi.NewInlineKeyboardButtonData("–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ", "–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–í—ã—Å—à–µ–µ (–±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç)", "–ë–∞–∫–∞–ª–∞–≤—Ä"),
		tgbotapi.NewInlineKeyboardButtonData("–í—ã—Å—à–µ–µ (–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞)", "–ú–∞–≥–∏—Å—Ç—Ä"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–í—ã—Å—à–µ–µ (–∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞)", "–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–µ
var citizenshipMessage = `–°—É–ø–µ—Ä!–°–∫–∞–∂–∏, –∫–∞–∫–æ–µ —É —Ç–µ–±—è –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ?`
var citizenshipKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–µ
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–†–§", "–†–§"),
		tgbotapi.NewInlineKeyboardButtonData("–†–ë", "–†–ë"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–°–ù–ì", "–°–ù–ì"),
		tgbotapi.NewInlineKeyboardButtonData("–î—Ä—É–≥–æ–µ", "–î—Ä—É–≥–æ–µ"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã
var workExperienceMessage = `–ö–ª–∞—Å—Å! –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏,—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—à—å?`
var workExperienceKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø—ã—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω–µ–µ –≥–æ–¥–∞", "–ú–µ–Ω–µ–µ –≥–æ–¥–∞"),
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç 1 –¥–æ 3 –ª–µ—Ç", "1 - 3 –≥–æ–¥–∞"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ç 3 –¥–æ 6 –ª–µ—Ç", "3 - 6 –ª–µ—Ç"),
		tgbotapi.NewInlineKeyboardButtonData("–ë–æ–ª–µ–µ 6 –ª–µ—Ç", "–ë–æ–ª–µ–µ 6 –ª–µ—Ç"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± —É—Ä–æ–≤–Ω–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
var hoursMessage = `–û—Ç–ª–∏—á–Ω–æ! –°–∫–∞–∂–∏, –∫–∞–∫—É—é –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Ç—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å?`
var hoursKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("20 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é", "20"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("30 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é", "30"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("40 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é", "40"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã
var workFormatMessage = `–ù–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç! –ê –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —Ç—ã —Ö–æ—á–µ—à—å?`
var workFormatKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–û—Ñ—Ñ–∏—Å(–ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ñ—Ñ–ª–∞–π–Ω)", "–û—Ñ—Ñ–∏—Å"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–µ–Ω–∫–∞", "–£–¥–∞–ª–µ–Ω–∫–∞"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ì–∏–±—Ä–∏–¥(–æ—Ñ—Ñ–∏—Å + —É–¥–∞–ª–µ–Ω–∫–∞)", "–ì–∏–±—Ä–∏–¥"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± —É—Ä–æ–≤–Ω–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
var expectedSalaryMessage = `–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª! –ù–∞ –∫–∞–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—ã —Ç—ã —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ—à—å?`

var salaryKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–î–∞,–≤—Å–µ –≤–µ—Ä–Ω–æ", "Correct salary"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç(–∏–∑–º–µ–Ω–∏—Ç—å)", "Uncorrect salary"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞—Ö
var readyToRelocateMessage = `–•–æ—Ä–æ—à–æ, –∞ –ø–æ–¥—Å–∫–∞–∂–∏, –≥–æ—Ç–æ–≤ –ª–∏ —Ç—ã –∫ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º, –ø–µ—Ä–µ–µ–∑–¥–∞–º?`

var readyToRelocateKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞—Ö
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ì–æ—Ç–æ–≤", "Ready to relocate"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–µ –≥–æ—Ç–æ–≤", "Not ready to relocate"),
	),
)

// —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
var goodResultMessage = `–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ—Ç–≤–µ—Ç—ã!

–Ø –ø–µ—Ä–µ–¥–∞–º –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä —Ä–µ–∫—Ä—É—Ç–µ—Ä—É –∏ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π‚òé
`

var contactNumberMessage = `–î–ª—è —ç—Ç–æ–≥–æ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π) —É–∫–∞–∂–∏,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞`

var contactNumberKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–î–∞,—ç—Ç–æ –º–æ–π –Ω–æ–º–µ—Ä", "Correct number"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç(–∏–∑–º–µ–Ω–∏—Ç—å)", "Uncorrect number"),
	),
)

// var banMessage = "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ @PMIIHrBot"
// var warningBanMessage = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤"
var noQuestionMessage = `–•–æ—Ä–æ—à–æ, –ø–æ–Ω—è–ª —Ç–µ–±—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,–ø–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π, —á—Ç–æ —è–≤—è–ª–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–æ–π —Ç–≤–æ–µ–≥–æ –æ—Ç–∫–∞–∑–∞? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –æ—Ç–±–æ—Ä–µ
–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`

var startDialogMessage = `–û—Ç–ª–∏—á–Ω–æ! –Ø –æ—á–µ–Ω—å —Ä–∞–¥! –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥) `

var failTrueMessage = `–û–π, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏, –∏ –º—ã —Å –Ω–µ —Å–º–æ–∂–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å 
—Ç–≤–æ—é –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É üò¢. –ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, —É –Ω–∞—Å –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –µ—Å—Ç—å –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –æ—Ç–ª–∏—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π,
–ë—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ —Ç—ã –Ω–∞–π–¥–µ—à—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ!`
var feedbackMessage = `–ó–Ω–∞–µ—à—å, –º–Ω–µ –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è. –ü–æ—ç—Ç–æ–º—É —è —Å–æ—Ö—Ä–∞–Ω—é —Ç–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ 
—Å–ª—É—á–∞–π –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏.
–ù–∞–¥–µ—é—Å—å, –∏ —Ç–µ–±–µ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ —Å–æ –º–Ω–æ–π –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å. –°–∫–∞–∂–∏, –∞ —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å–æ –º–Ω–æ–π?
–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ`

var noQuestionKeyBoard = tgbotapi.NewInlineKeyboardMarkup( // // inline –º–µ–Ω—é –¥–ª—è —Å–±–æ—Ä–µ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –æ—Ç–∫–∞–∑–∞ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞", "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–£–∂–µ –Ω–∞—à–µ–ª —Ä–∞–±–æ—Ç—É", "–£–∂–µ –Ω–∞—à–µ–ª —Ä–∞–±–æ—Ç—É"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"),
	),
	tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("–ù–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å", "–ù–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å"),
	),
)

var finalMessage = `–°–ø–∞—Å–∏–±–æ! –ù–∞ —ç—Ç–æ–º, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É! 
–ú–Ω–µ –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è, –Ω–∞–¥–µ—é—Å—å, —Ç–µ–±–µ —Ç–æ–∂–µ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ –Ω–∞—à–µ–º –¥–∏–∞–ª–æ–≥–µ, –º–Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ!`

func DetermineId_pos(profil, position string) int {
	if profil == "Golang backend - developer" && position == "Junior" {
		return 1
	} else if profil == "Golang backend - developer" && position == "Intern" {
		return 2
	} else if profil == "Golang backend - developer" && position == "Middle" {
		return 3
	} else if profil == "Golang backend - developer" && position == "Senior" {
		return 4
	} else if profil == "Golang backend - developer" && position == "Team Lead" {
		return 5
	} else if profil == "Java backend - developer" && position == "Junior" {
		return 6
	} else if profil == "Java backend - developer" && position == "Intern" {
		return 7
	} else if profil == "Java backend - developer" && position == "Middle" {
		return 8
	} else if profil == "Java backend - developer" && position == "Senior" {
		return 9
	} else if profil == "Java backend - developer" && position == "Team Lead" {
		return 10
	} else if profil == "Frontend - developer" && position == "Junior" {
		return 11
	} else if profil == "Frontend - developer" && position == "Intern" {
		return 12
	} else if profil == "Frontend - developer" && position == "Middle" {
		return 13
	} else if profil == "Frontend - developer" && position == "Senior" {
		return 14
	} else if profil == "Frontend - developer" && position == "Team Lead" {
		return 15
	} else if profil == "Data Science - specialist" && position == "Junior" {
		return 16
	} else if profil == "Data Science - specialist" && position == "Intern" {
		return 17
	} else if profil == "Data Science - specialist" && position == "Middle" {
		return 18
	} else if profil == "Data Science - specialist" && position == "Senior" {
		return 19
	} else if profil == "Data Science - specialist" && position == "Team Lead" {
		return 20
	} else {
		return 3
	}
}
func isValidPhoneNumber(phoneNumber string) bool {
	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: 89387650971, +79387650971
	// –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–∏—Ä–µ –∏ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏
	result := regexp.MustCompile(`^(8|\+7)[\s-]?\d{3}[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2}$`)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
	return result.MatchString(phoneNumber)
}

type Config struct {
	TelegramBotToken string
	DbMysqlParams    string
}

func DecodeConfig(fileName string) (Config, error) {
	file, _ := os.Open(fileName)
	decoder := json.NewDecoder(file)
	configuration := Config{}
	err := decoder.Decode(&configuration)
	return configuration, err
}
